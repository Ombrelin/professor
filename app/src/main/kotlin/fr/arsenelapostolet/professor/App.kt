/*
 * This source file was generated by the Gradle 'init' task
 */
package fr.arsenelapostolet.professor

import fr.arsenelapostolet.professor.core.application.*
import fr.arsenelapostolet.professor.core.repositories.StudentRepository
import fr.arsenelapostolet.professor.core.services.*
import fr.arsenelapostolet.professor.repositories.SQLightStudentRepository
import fr.arsenelapostolet.professor.viewmodels.GitToolsViewModel
import fr.arsenelapostolet.professor.viewmodels.StudentsViewModel
import fr.arsenelapostolet.professor.viewmodels.utils.DialogService
import fr.arsenelapostolet.professor.viewmodels.utils.FileService
import fr.arsenelapostolet.professor.views.AdwaitaDialogService
import fr.arsenelapostolet.professor.views.AdwaitaFilePicker
import fr.arsenelapostolet.professor.views.GitToolsView
import fr.arsenelapostolet.professor.views.StudentsView
import org.gnome.adw.*
import org.gnome.gio.ApplicationFlags
import org.gnome.gio.Resource
import org.gnome.gtk.Grid
import org.gnome.gtk.IconTheme
import org.gnome.gtk.Label
import org.kodein.di.*
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import java.nio.file.Path
import java.sql.Connection
import java.sql.DriverManager


class AppKt(args: Array<String>?) {

    private val app: Application = Application("fr.arsenelapostolet.Professor", ApplicationFlags.DEFAULT_FLAGS)

    init {
        logger.info("Starting Professor")
        app.onActivate { this.activate() }
        app.run(args)
    }

    private fun activate() {
        val window = buildWindow()
        val kodein = buildDependencyInjectionContainer(window)
        val viewStack = buildViewStack(kodein)

        val headerBar = buildHeaderBar(viewStack)
        window.content = buildViewStackBox(viewStack, headerBar)
        window.present()

    }

    private fun buildHeaderBar(viewStack: ViewStack): HeaderBar? = HeaderBar
        .builder()
        .setTitleWidget(buildViewSwitcher(viewStack))
        .build()

    private fun buildViewStack(kodein: DI): ViewStack = ViewStack()
        .also {
            it.addTitledWithIcon(
                kodein.direct.instance<StudentsView>(),
                "students",
                "Ã‰tudiants",
                "avatar-default-symbolic"
            )
            it.addTitledWithIcon(buildGradesPage(), "grades", "Notes", "object-select-symbolic")
            it.addTitledWithIcon(
                kodein.direct.instance<GitToolsView>(),
                "git-tools",
                "Outils Git",
                "preferences-system"
            )
        }

    private fun buildDependencyInjectionContainer(window: ApplicationWindow): DI = DI {
        val storageService = UserDirectoryStorageService()
        bindProvider<ApplicationWindow> { window }
        bindProvider<Connection> { connectToLocalDatabase(storageService.getStorageDirectoryPath()) }
        bindSingleton { GradesApplication(instance()) }
        bindSingleton<StudentRepository> { SQLightStudentRepository(instance()) }
        bindSingleton<FileService> { AdwaitaFilePicker(instance()) }
        bindSingleton { StudentsViewModel(instance(), instance()) }
        bindSingleton { StudentsView(instance(), instance()) }
        bindSingleton { GitApplication(instance(), instance(), instance()) }
        bindSingleton<GitService> { DefaultGitService(instance()) }
        bindSingleton<SecretService> { FreeDesktopSecretService() }
        bindSingleton<DialogService> { AdwaitaDialogService(instance()) }
        bindSingleton { GitToolsView(instance()) }
        bindSingleton { GitToolsViewModel(instance(), instance(), instance()) }
        bindSingleton<GitlabService> { DefaultGitlabService(instance()) }
        bindSingleton<StorageService> { storageService }
    }

    private fun connectToLocalDatabase(localStorageDirectory: Path): Connection {
        val dbFilePath = localStorageDirectory.resolve("test.db")
        val url = "jdbc:sqlite:${dbFilePath}"
        return DriverManager
            .getConnection(url);
    }

    private fun buildGradesPage(): Grid? = Grid.builder()
        .setColumnSpacing(1)
        .setRowSpacing(1)
        .build()
        .also { it.attach(Label("grades"), 0, 0, 4, 1) }

    private fun buildViewStackBox(viewStack: ViewStack, headerBar: HeaderBar?): ToolbarView? = ToolbarView
        .builder()
        .setContent(viewStack)
        .build()
        .also { it.addTopBar(headerBar) }

    private fun buildWindow(): ApplicationWindow = ApplicationWindow
        .builder()
        .setApplication(app)
        .setTitle("Professor")
        .setDefaultWidth(1280)
        .setDefaultHeight(720)
        .build()
        .also { IconTheme.getForDisplay(it.display).addResourcePath("/icons") }

    private fun buildViewSwitcher(viewStack: ViewStack): ViewSwitcher = ViewSwitcher
        .builder()
        .setStack(viewStack)
        .setPolicy(ViewSwitcherPolicy.WIDE)
        .build()

    companion object {
        val logger: Logger = LoggerFactory.getLogger(FreeDesktopSecretService::class.java)

        @JvmStatic
        fun main(args: Array<String>) {
            try {
                var resource = Resource.load("src/main/resources/professor.gresource");
                resource.resourcesRegister();
                AppKt(args)
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }
}