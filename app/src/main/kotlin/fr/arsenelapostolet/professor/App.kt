/*
 * This source file was generated by the Gradle 'init' task
 */
package fr.arsenelapostolet.professor

import app.cash.sqldelight.db.SqlDriver
import app.cash.sqldelight.driver.jdbc.sqlite.JdbcSqliteDriver
import fr.arsenelapostolet.data.professor.StudentQueries
import org.gnome.adw.*
import org.gnome.gio.ApplicationFlags
import org.gnome.gtk.Box
import org.gnome.gtk.Button
import org.gnome.gtk.Label
import org.gnome.gtk.Orientation


class AppKt(args: Array<String>?) {
    private val app: Application

    init {
        app = Application("my.example.HelloApp", ApplicationFlags.DEFAULT_FLAGS)
        app.onActivate { this.activate() }
        app.run(args)
    }

    fun activate() {
        val window: ApplicationWindow = ApplicationWindow(app)
        window.title = ("Professor")
        window.setDefaultSize(1280, 720)

        val headerbar: HeaderBar = HeaderBar()
        window.titlebar = headerbar

        var box = Box(Orientation.VERTICAL, 8)
        var stack = ViewStack()
        stack.vexpand = true
        box.append(stack)
        stack.addTitled(Label("LOL"),"lol","Lol")
        stack.addTitled(Label("XOX"),"xox","xox")

        val switcher = ViewSwitcherTitle()
        /*
        val grid = Grid()
        grid.columnSpacing = 1
        grid.rowSpacing = 1

        val headerbar: HeaderBar = HeaderBar()
        headerbar.setHexpand(true)

        val newButton: Button = Button.fromIconName("document-new-symbolic")
        headerbar.packStart(newButton)

        val openButton: Button = Button.fromIconName("document-open-symbolic")
        openButton.setLabel("Open")
        headerbar.packStart(openButton)

        val saveButton: Button = Button.fromIconName("document-save-symbolic")
        headerbar.packStart(saveButton)
        headerbar.setCenteringPolicy(CenteringPolicy.STRICT)
        grid.attach(headerbar, 0, 0, 4, 1)

        val driver: SqlDriver = JdbcSqliteDriver("jdbc:sqlite:test.db")
        Database.Schema.create(driver)
*/


        window.child = box
        window.present()
    }

    companion object {
        @JvmStatic
        fun main(args: Array<String>) {
            try {
                AppKt(args)
            }
           catch (e: Exception) {
               e.printStackTrace();
           }
        }
    }
}